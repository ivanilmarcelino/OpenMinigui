#line 54 "S:\Mega\Dev\32\BCC\Minigui\include\i_var.ch"
  MEMVAR _HMG_SYSDATA
#line 18 "demo.prg"
FUNCTION Main()






   LOCAL n, nW, nH, nG, cVal, lDark, aSysColor10 := {}
   LOCAL aColorName := {}, aSysColorName := {}
   LOCAL aColor, aSysColor, aColorWin10
   LOCAL BmpW := 16
   LOCAL BmpH := 16
   LOCAL nHCmb := 500

   aColor := ColorHMG()
   aSysColor := ColorHMGSys()
   aColorWin10 := ColorHMGWin10()

   AEval( aColor, {| x | AAdd( aColorName, x[ 2 ] ) } )
   AEval( aSysColor, {| x | AAdd( aSysColorName, x[ 2 ] ) } )
   AEval( aColorWin10, {| x | AAdd( aSysColor10, x[ 2 ] + " - registry key: " + x[ 3 ] ) } )







 _DefineWindow ( "Form_1", "Harbour MiniGUI Combo Color Demo - by Janusz Pora", 0, 0, 500, 300, .F., .T., .T., .F., .F., {,}, {,}, {|| SetProperty ( "Form_1", "Label_Down" , "BACKCOLOR" , iif( IsWin10OrLater(), Color10_ActiveCaption(),  HMG_n2RGB( GetSysColor( 2 ) ) ) ) }, ,, , ,, , , .F. , .F. , .T. , , .F. , ,, , , ,, , , , , , , , , , .F. , , , , .F. , , , , , .F. , .F. , , , .F. , , , )

      nW := _GetClientRect ( iif ( _HMG_SYSDATA[218] == "C" , GetControlHandle ( _HMG_SYSDATA[255] , _HMG_SYSDATA[254] ) , GetFormHandle ( _HMG_SYSDATA[254] ) ) ) [3]
      nH := _GetClientRect ( iif ( _HMG_SYSDATA[218] == "C" , GetControlHandle ( _HMG_SYSDATA[255] , _HMG_SYSDATA[254] ) , GetFormHandle ( _HMG_SYSDATA[254] ) ) ) [4]
      nG := GetTitleHeight()

      _DefineMainMenu( )
         _DefineMenuPopup( "&File" , , , )
            _DefineMenuItem ( "Get HMG Color" , {|| GetHMGColor( aColor )} , , , .F. , .F. ,,,, .F., .F. ,, .F. )
            _DefineMenuItem ( "Get System Color" , {|| GetSystemColor( aSysColor )} , , , .F. , .F. ,,,, .F., .F. ,, .F. )
            _DefineMenuItem ( "Get Win10 Color" , {|| GetWin10Color( aColorWin10 )} , , , .F. , .F. ,,,, .F., .F. ,, .F. )
            _DefineSeparator()
            _DefineMenuItem ( "&Exit" , {|| DoMethod ( "Form_1", "RELEASE" )} , , , .F. , .F. ,,,, .F., .F. ,, .F. )
         _EndMenuPopup()
         _DefineMenuPopup( "&Help" , , , )
            _DefineMenuItem ( "&About" , {|| MsgInfo ( "MiniGUI Combo Color Demo" )} , , , .F. , .F. ,,,, .F., .F. ,, .F. )
         _EndMenuPopup()

      _EndMenu()




      _DefineImageList ( "Imagelst_1" , , BmpW, BmpH ,{} ,, , , .F. )

      FOR n := 1 TO Len( aColor )
         HMG_SetColorBtm( aColor[ n, 1 ], 0, BmpW, BmpH )
         HMG_SetColorBtm( aColor[ n, 1 ], 1, BmpW, BmpH )
         HMG_SetColorBtm( aColor[ n, 1 ], 0, BmpW, BmpH )
      NEXT



      _DefineImageList ( "Imagelst_2" , , BmpW, BmpH ,{} ,, , , .F. )

      FOR n := 1 TO Len( aSysColor )
         HMG_SetSysColorBtm( aSysColor[ n, 1 ], 0, BmpW, BmpH )
         HMG_SetSysColorBtm( aSysColor[ n, 1 ], 1, BmpW, BmpH )
         HMG_SetSysColorBtm( aSysColor[ n, 1 ], 0, BmpW, BmpH )
      NEXT



      _DefineImageList ( "Imagelst_3" , , BmpW, BmpH ,{} ,, , , .F. )

      FOR n := 1 TO Len( aColorWin10 )
         HMG_SetColor10Btm( aColorWin10[ n, 1 ], 0, BmpW, BmpH )
         HMG_SetColor10Btm( aColorWin10[ n, 1 ], 1, BmpW, BmpH )
         HMG_SetColor10Btm( aColorWin10[ n, 1 ], 0, BmpW, BmpH )
      NEXT

      _DefineLabel ( "Label_1",, 20, 10, "HMG Colors ComboColor",,, , , .F., .F. , .F. , .F. , .F. , .F. ,,,,,, .F., .F., .F., .F. , .T. , .F. , .F. , .F. ,,, .F., .F., , , , )










      _DefineComboEx ( "ComboEx_1",, 20, 33, 150, aColorName , 1, "MS Sans Serif", 9, "Extend Combo HMG color", {| i | i := GetProperty ( "Form_1", "ComboEx_1" , "VALUE" ),  SetProperty ( "Form_1", "Label_Down" , "BACKCOLOR" , aColor[ i, 1 ] ) }, nHCmb,,, {|| GetHMGColor( aColor )},, .F., .F., .F. , .F., .F., .F., .F. , , , .F. , , .F. , "",,, , , ,, "Imagelst_1",,, .F. , , )

      _DefineLabel ( "Label_2",, 190, 10, "System Colors ComboColor",,, , , .F., .F. , .F. , .F. , .F. , .F. ,,,,,, .F., .F., .F., .F. , .T. , .F. , .F. , .F. ,,, .F., .F., , , , )










      _DefineComboEx ( "ComboEx_2",, 200, 33, 270, aSysColorName , 1, "MS Sans serif", 9, "Extend Combo System Color", {| i | i := GetProperty ( "Form_1", "ComboEx_2" , "VALUE" ),  SetProperty ( "Form_1", "Label_Down" , "BACKCOLOR" , HMG_n2RGB( GetSysColor( aSysColor[ i, 1 ] ) ) ) }, nHCmb,,, {|| GetSystemColor( aSysColor )},, .F., .F., .F. , .F., .F., .F., .F. , , , .F. , , .F. , "",,, , , ,, "Imagelst_2",,, .F. , , )

      _DefineLabel ( "Label_3",, 20, 80, "Windows 10 and higher",,, , , .F., .F. , .F. , .F. , .F. , .F. ,,,,,, .F., .F., .F., .F. , .T. , .F. , .F. , .F. ,,, .F., .F., , , , )










      _DefineComboEx ( "ComboEx_3",, 20, 103, 450, aSysColor10 , 1, "MS Sans serif", 9, "Windows 10 Combo System Color", {| i | i := GetProperty ( "Form_1", "ComboEx_3" , "VALUE" ),  SetProperty ( "Form_1", "Label_Down" , "BACKCOLOR" , aColorWin10[ i, 1 ] ) }, nHCmb,,, {|| GetWin10Color( aColorWin10 )},, .F., .F., .F. , .F., .F., .F., .F. , , , .F. , , .F. , "",,, , , ,, "Imagelst_3",,, .F. , , )

      cVal := HMG_AppsUseTheme( .T. )

      _DefineLabel ( "Label_4",, 210, 80, "Theme windows: " + cVal,,, , , .F., .F. , .F. , .F. , .F. , .F. ,,,,,, .F., .F., .F., .F. , .T. , .F. , .F. , .F. ,,, .F., .F., , , , )



      _DefineCheckBox ( "Chk_1",, 20, 160, "Enable dark theme Windows 10", lDark , , , , {|| lDark := GetProperty ( _HMG_SYSDATA[254] , _HMG_SYSDATA[255] , "VALUE" ), WinDarkTheme( lDark ) } , 300 , 20 ,, ,, .F., .F. ,.F., .F., .F., .F. , , , {   0 ,   0 ,   0 } , .T. , .F. , .F. , , .F. , .F. , , )

      cVal := "(if the checkbox is not enabled in the color settings: Window titles and window borders)"
      _DefineLabel ( "Label_5",, 40, 180, cVal, nW - 40, 40, , , .F., .F. , .F. , .F. , .F. , .T. ,, { 255 ,   0 ,   0 },,,, .F., .F., .F., .F. , .F. , .F. , .F. , .F. ,,, .F., .F., , , , )


      _DefineLabel ( "Label_Down",, 0, nH - nG - GetMenuBarHeight(), "", nW, nG, , , .F., .F. , .F. , .F. , .F. , .F. , { 255 , 255 , 255 },,,,, .F., .F., .F., .F. , .F. , .F. , .F. , .F. ,,, .F., .F., , , , )

   _EndWindow ()

   DoMethod ( "Form_1", "CENTER" )
   DoMethod ( "Form_1", "ACTIVATE" )

RETURN NIL


FUNCTION WinDarkTheme( lDark )













   SetWindowDarkTheme( _HMG_SYSDATA[30], 0, lDark )

RETURN NIL


FUNCTION HMG_AppsUseTheme( lRet )














   LOCAL i, cRet

   lRet := iif( lRet == NIL, .T., lRet )
   i := win_regRead( "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize\AppsUseLightTheme" )
   IF i == 0
      cRet := "Dark theme"
   ELSE
      cRet := "Light theme"
   ENDIF

RETURN iif( lRet, cRet, i )


FUNCTION Color10_ActiveCaption













   LOCAL i, xKey, aClr


   i := win_regRead( "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\DWM\ColorPrevalence" )
   IF i == 1
      xKey := win_regRead( "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\DWM\AccentColor" )
      aClr := HMG_n2RGB( xKey )
   ELSE
      IF HMG_AppsUseTheme( .F. ) == 0
         aClr := {   0 ,   0 ,   0 }
      ELSE
         aClr := { 255 , 255 , 255 }
      ENDIF
   ENDIF

RETURN aClr


FUNCTION Color10_ActiveCaptionKey( i )











RETURN iif( i == 0, {   0 ,   0 ,   0 }, { 255 , 255 , 255 } )


FUNCTION HMG_SetColorBtm( aColor, bChecked, BmpWidh, BmpHeight )

















   LOCAL hImage, hImageLst, nColor
   hImageLst := GetProperty ( _HMG_SYSDATA[254], "imagelst_1" , "Handle" )
   nColor := ( aColor[ 1 ] + ( aColor[ 2 ] * 256 ) + ( aColor[ 3 ] * 65536 ) )
   hImage := CreateColorBMP( GetProperty ( _HMG_SYSDATA[254] , "Handle" ), BmpWidh, BmpHeight, nColor, bChecked )
   IL_AddMaskedIndirect( hImageLst, hImage, , BmpWidh, BmpHeight, 1 )

RETURN NIL



FUNCTION HMG_SetSysColorBtm( COLOR, bChecked, BmpWidh, BmpHeight )

















   LOCAL hImage, hImageLst, nColor
   hImageLst := GetProperty ( _HMG_SYSDATA[254], "imagelst_2" , "Handle" )
   nColor := GetSysColor( Color )
   hImage := CreateColorBMP( GetProperty ( _HMG_SYSDATA[254] , "Handle" ), BmpWidh, BmpHeight, nColor, bChecked )
   IL_AddMaskedIndirect( hImageLst, hImage, , BmpWidh, BmpHeight, 1 )

RETURN NIL


FUNCTION HMG_SetColor10Btm( aColor, bChecked, BmpWidh, BmpHeight )

















   LOCAL hImage, hImageLst, nColor
   hImageLst := GetProperty ( _HMG_SYSDATA[254], "imagelst_3" , "Handle" )
   nColor := ( aColor[ 1 ] + ( aColor[ 2 ] * 256 ) + ( aColor[ 3 ] * 65536 ) )
   hImage := CreateColorBMP( GetProperty ( _HMG_SYSDATA[254] , "Handle" ), BmpWidh, BmpHeight, nColor, bChecked )
   IL_AddMaskedIndirect( hImageLst, hImage, , BmpWidh, BmpHeight, 1 )

RETURN NIL


FUNCTION GetHMGColor( aColor )












   LOCAL nPos, cStr, aColorHMG
   nPos := GetProperty ( "Form_1", "ComboEx_1" , "VALUE" )
   aColorHMG := aColor[ nPos, 1 ]
   IF nPos > 0
      cStr := aColor[ nPos, 2 ] + "  { " + AllTrim( Str( aColorHMG[ 1 ] ) ) + "," + AllTrim( Str( aColorHMG[ 2 ] ) ) + "," + AllTrim( Str( aColorHMG[ 3 ] ) ) + " }"
      MsgInfo ( cStr, "Selected color", , .F. )
   ENDIF

RETURN NIL


FUNCTION GetWin10Color( aColor )












   LOCAL nPos, cStr, aColorWin
   nPos := GetProperty ( "Form_1", "ComboEx_3" , "VALUE" )
   aColorWin := aColor[ nPos, 1 ]
   IF nPos > 0
      cStr := aColor[ nPos, 2 ] + "  { " + AllTrim( Str( aColorWin[ 1 ] ) ) + "," + AllTrim( Str( aColorWin[ 2 ] ) ) + "," + AllTrim( Str( aColorWin[ 3 ] ) ) + " }"
      MsgInfo ( cStr, "Selected color", , .F. )
   ENDIF

RETURN NIL


FUNCTION GetSystemColor( aColor )












   LOCAL nPos, cStr, nColorSys
   nPos := GetProperty ( "Form_1", "ComboEx_2" , "VALUE" )
   nColorSys := GetSysColor ( aColor[ nPos, 1 ] )
   IF nPos > 0
      cStr := aColor[ nPos, 2 ] + "  { " + AllTrim( Str( GetRed( nColorSys ) ) ) + "," + AllTrim( Str( GetGreen( nColorSys ) ) ) + "," + AllTrim( Str( GetBlue( nColorSys ) ) ) + " }"
      MsgInfo ( cStr, "Selected color", , .F. )
   ENDIF

RETURN NIL


FUNCTION ColorHMG()
































   LOCAL aColor :=  { { { 255 , 255 ,   0 }, "YELLOW" },  { { 255 , 128 , 192 }, "PINK" },  { { 255 ,   0 ,   0 }, "RED" },  { { 255 ,   0 , 255 }, "FUCHSIA" },  { { 128 ,  64 ,  64 }, "BROWN" },  { { 255 , 128 ,  64 }, "ORANGE" },  { {   0 , 255 ,   0 }, "GREEN" },  { { 128 ,   0 , 128 }, "PURPLE" },  { {   0 ,   0 ,   0 }, "BLACK" },  { { 255 , 255 , 255 }, "WHITE" },  { { 128 , 128 , 128 }, "GRAY" },  { {   0 ,   0 , 255 }, "BLUE" },  { { 192 , 192 , 192 }, "SILVER" },  { { 128 ,   0 ,   0 }, "MAROON" },  { { 128 , 128 ,   0 }, "OLIVE" },  { {   0 , 128 ,   0 }, "LGREEN" },  { {   0 , 255 , 255 }, "AQUA" },  { {   0 ,   0 , 128 }, "NAVY" },  { {   0 , 128 , 128 }, "TEAL" } }

RETURN aColor


FUNCTION ColorHMGSys()








































   LOCAL aColor :=  { { 27, "GRADIENTACTIVECAPTION" },  { 28, "GRADIENTINACTIVECAPTION" },  { 21, "Dark shadow for 3D display elements" },  { 15, "Face color for 3D display elements" },  { 20, "Highlight color for 3D display elements" },  { 22, "Light color for 3D display elements" },  { 16, "Shadow color for 3D display elements" },  { 10, "Active window border" },  { 2, "Active window caption" },  { 12, "Background color of MDI applications" },  { 1, "Desktop" },  { 18, "Text on push buttons" },  { 9, "Text in caption, size, and scroll arrow box" },  { 17, "Grayed (disabled) text" },  { 13, "Item(s) selected in a control" },  { 14, "Text of item(s) selected in a control" },  { 11, "Inactive window border" },  { 3, "Inactive window caption" },  { 19, "Color of text in an inactive caption" },  { 24, "Background color for tooltip controls" },  { 23, "Text color for tooltip controls" },  { 4, "Menu background" },  { 7, "Text in menus" },  { 0, "Scroll bar gray area" },  { 5, "Window background" },  { 6, "Window frame" },  { 8, "Text in windows" } }

RETURN aColor


FUNCTION ColorHMGWin10()

















   LOCAL aColor :=  { { Color10_ActiveCaption(), "Active window caption", "AccentColor" },  { Color10_ActiveCaptionKey( 0 ), "Active window caption: dark theme", "ColorPrevalence = 0" },  { Color10_ActiveCaptionKey( 1 ), "Active window caption: light theme", "ColorPrevalence = 0" } }

RETURN aColor



#pragma BEGINDUMP

#include <mgdefs.h>
#include <commctrl.h>

extern HB_PTRUINT wapi_GetProcAddress( HMODULE hModule, LPCSTR lpProcName );
typedef HRESULT (WINAPI *DwmSetWindowAttributeCallback)(HWND hwnd, DWORD dwAttribute, LPCVOID pvAttribute, DWORD cbAttribute);

static HINSTANCE libDWM;
static DwmSetWindowAttributeCallback DwmSetWindowAttribute;

HB_FUNC ( SETWINDOWDARKTHEME )
/*
 *  This function sets the dark mode theme for a given window.
 *  It uses the DwmSetWindowAttribute function from dwmapi.dll to apply the dark theme.
 *  This function directly interacts with the Windows API to change the window's appearance.
 *
 *  Input parameters:
 *      handle - The handle of the window to apply the dark theme to.
 *      isLegacy - A logical value indicating whether to use the legacy dark theme (Windows 10 versions before 2004).
 *      isDarkMode - A logical value indicating whether to enable (TRUE) or disable (FALSE) the dark theme.
 *
 *  Return value:
 *      None (void). The function modifies the window's appearance directly.
 */
{
   BOOL isDarkMode;

   HWND handle;
   BOOL isLegacy;
   DWORD code;

   handle = (HWND) HB_PARNL( 1 );
   isLegacy = hb_parl( 2 );
   isDarkMode = hb_parl( 3 );

   if (libDWM == NULL) libDWM = LoadLibrary(TEXT("dwmapi.dll"));

   if (DwmSetWindowAttribute == NULL) {
      DwmSetWindowAttribute = (DwmSetWindowAttributeCallback) wapi_GetProcAddress(libDWM, "DwmSetWindowAttribute");
   }

   // Windows 10 versions before 2004 = 19
   // Windows 10 like 22H2 and Windows 11 = 20
   code = ( isLegacy == 0 ? 20 : 19 );

   DwmSetWindowAttribute(handle, code, &isDarkMode, sizeof(isDarkMode));

   SendMessage(handle, WM_NCACTIVATE, 0, 0);
   SendMessage(handle, WM_NCACTIVATE, 1, 0);
}

static void GoToPoint( HDC hDC, int ix, int iy )
/*
 *  This function moves the current position of the pen in the specified device context (DC) to a new location.
 *  It's a helper function used by CreateColorBMP to draw the checkmark.
 *
 *  Input parameters:
 *      hDC - A handle to the device context.
 *      ix - The x-coordinate of the new location.
 *      iy - The y-coordinate of the new location.
 *
 *  Return value:
 *      None (void). The function modifies the device context directly.
 */
{
   POINT pt;
   MoveToEx( hDC, ix, iy, &pt );
}


HB_FUNC ( CREATECOLORBMP )
/*
 *  This function creates a color bitmap with an optional checkmark.
 *  It's used to generate the images displayed in the comboboxes, providing a visual representation of the colors.
 *
 *  Input parameters:
 *      hwnd - The handle of the window.
 *      BmpWidh - The width of the bitmap.
 *      BmpHeight - The height of the bitmap.
 *      nColor - The color of the bitmap.
 *      bChecked - A logical value indicating whether to draw a checkmark on the bitmap.
 *
 *  Return value:
 *      HBITMAP - A handle to the created bitmap.
 */
{
   HBRUSH hOldBrush;
   HBRUSH hColorBrush;
   HBRUSH hBlackBrush = CreateSolidBrush( RGB( 0, 0, 0 ) );
   HBRUSH hWhiteBrush = CreateSolidBrush( RGB( 255, 255, 255 ) );
   HPEN   hBlackPen   = CreatePen( PS_SOLID, 1, RGB( 0, 0, 0 ) );

   RECT rect;
   HBITMAP hBmp;
   COLORREF clr   = hb_parnl( 4 );
   int bChecked   = hb_parnl( 5 );
   int width      = hb_parni( 2 );
   int height     = hb_parni( 3 );
   HWND handle    = (HWND) HB_PARNL( 1 );
   HDC imgDC      = GetDC ( handle );
   HDC tmpDC      = CreateCompatibleDC(imgDC);

   if( ( width==0 ) & ( height==0 ) )
   {
      width  = 16;
      height = 16;
   }

   SetRect(&rect,0,0,width,height);   // Size Bmp

   hBmp=CreateCompatibleBitmap(imgDC,width,height);
   SelectObject(tmpDC,hBmp);

   hOldBrush = SelectObject( tmpDC, hWhiteBrush );

   FillRect( tmpDC, &rect, hWhiteBrush );

   rect.left   += 1 ;
   rect.top    += 1 ;
   rect.right  -= 1 ;
   rect.bottom -= 1 ;
   FillRect( tmpDC, &rect, hBlackBrush );

   rect.top    += 1 ;
   rect.left   += 1 ;
   rect.right  -= 1 ;
   rect.bottom -= 1 ;

   hColorBrush = CreateSolidBrush( clr );

   SelectObject( tmpDC, hColorBrush );

   FillRect( tmpDC, &rect, hColorBrush );

   rect.top    += 1 ;
   rect.right  -= 4 ;
   rect.bottom -= 1 ;

   if( bChecked == 1 )
   {
      GoToPoint( tmpDC, rect.right, rect.top );

      SelectObject( tmpDC, hBlackPen );

      LineTo( tmpDC, rect.right - 4 , rect.bottom - 3 );
      LineTo( tmpDC, rect.right - 7, rect.bottom - 6 );

      GoToPoint( tmpDC, rect.right, rect.top + 1);
      LineTo( tmpDC, rect.right - 4 , rect.bottom - 2 );
      LineTo( tmpDC, rect.right - 7, rect.bottom - 5 );

      GoToPoint( tmpDC, rect.right, rect.top + 2);
      LineTo( tmpDC, rect.right - 4 , rect.bottom - 1 );
      LineTo( tmpDC, rect.right - 7, rect.bottom - 4 );
   }

   SelectObject( tmpDC, hOldBrush );
   DeleteObject( hBlackBrush );
   DeleteObject( hWhiteBrush );
   DeleteObject( hColorBrush );
   DeleteObject( hBlackPen );


   DeleteDC( imgDC );
   DeleteDC( tmpDC );

   HB_RETNL( ( LONG_PTR ) hBmp );
}

HB_FUNC( IL_ADDMASKEDINDIRECT )
/*
 *  This function adds a masked bitmap to an image list.
 *  It's used to add the color bitmaps created by CreateColorBMP to the imagelist,
 *  allowing them to be displayed in the comboboxes. The mask ensures that the background
 *  of the bitmap is transparent.
 *
 *  Input parameters:
 *      hwnd - The handle of the image list.
 *      himage - The handle of the bitmap to add.
 *      color - The color to use as the mask.  CLR_NONE indicates no mask.
 *      ix - The width of each image in the bitmap.
 *      iy - The height of each image in the bitmap.
 *      imagecount - The number of images in the bitmap.
 *
 *  Return value:
 *      LRESULT - The index of the image added to the image list, or -1 if the function fails.
 */
{
   BITMAP   bm;
   HBITMAP  himage = ( HBITMAP ) HB_PARNL( 2 );
   COLORREF clrBk   = CLR_NONE;
   LRESULT  lResult = -1;
   int      ic      = 1;

   if( hb_parnl( 3 ) )
      clrBk = ( COLORREF ) hb_parnl( 3 );

   if( hb_parni( 6 ) )
      ic = hb_parni( 6 );

   if( GetObject( himage, sizeof( BITMAP ), &bm ) != 0 )
   {
      if( ( hb_parni( 4 ) * ic == bm.bmWidth ) & ( hb_parni( 5 ) == bm.bmHeight ) )
         lResult = ImageList_AddMasked( ( HIMAGELIST ) HB_PARNL( 1 ), himage, clrBk );

      DeleteObject( himage );
   }

   hb_retni( lResult );
}

#pragma ENDDUMP
