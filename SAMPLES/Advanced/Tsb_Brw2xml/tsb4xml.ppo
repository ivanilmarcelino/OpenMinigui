#line 54 "S:\Mega\Dev\32\BCC\Minigui\include\i_var.ch"
  MEMVAR _HMG_SYSDATA
#line 14 "S:\Mega\Dev\32\BCC\Minigui\include\miniprint.ch"
  MEMVAR _HMG_MINIPRINT
#line 11 "tsb4xml.prg"
FUNC oTsb2Xml2Xls( cXml, oBrw, aTitle, aBefore, aAfter, aForma, cSheet )
   LOCAL oXml

   oXml := Tsb2Xml2Xls():New(cXml, oBrw, aTitle, aBefore, aAfter, aForma, cSheet )

   oXml:StyleForma  ()
   oXml:StyleTitle  ()
   oXml:StyleBefore ()
   oXml:StyleAfter  ()

   oXml:StyleTable  ()

   oXml:WriteForma  ()
   oXml:WriteTitle  ()
   oXml:WriteBefore ()
   oXml:WriteSuperHd()
   oXml:WriteHeader ()
   oXml:WriteColumns()
   oXml:WriteFooter ()
   oXml:WriteAfter  ()

RETURN oXml

FUNC oColorN2H( cPref, nDef, cDef )
RETURN ColorN2H():New( cPref ):Def( nDef, cDef )

_HB_CLASS ColorN2H ; function ColorN2H ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ColorN2H", iif( .F., { }, { @HBObject() } ), @ColorN2H() ) ) ;

  _HB_MEMBER { oNH } ; oClass:AddMultiData(, oKeyData(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oNH"}, .F. )
  _HB_MEMBER { cPref } ; oClass:AddMultiData(, "C", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPref"}, .F. )
  _HB_MEMBER { nLenN } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nLenN"}, .F. )
  _HB_MEMBER { nDef } ; oClass:AddMultiData(, 12632256, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDef"}, .F. )
  _HB_MEMBER { cDef } ; oClass:AddMultiData(, HMG_ClrToHTML( 12632256 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDef"}, .F. )

  _HB_MEMBER New(); oClass:AddInline( "New", {|Self, cPref | ( ( Self ) ), ( ::cPref := hb_defaultValue(cPref, ::cPref), Self ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER Def( nDef, cDef); oClass:AddMethod( "Def", @ColorN2H_Def(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER Name( nKey); oClass:AddMethod( "Name", @ColorN2H_Name(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER Set(); oClass:AddInline( "Set", {|Self, nClr, hClr | ( ( Self ) ), ::oNH:Set( nClr, hClr ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


  _HB_MEMBER Get(); oClass:AddInline( "Get", {|Self, nKey, xDef | ( ( Self ) ), ( nKey := hb_defaultValue( nKey, ::nDef),  xDef := hb_defaultValue( xDef, ::cDef),  ::oNH:Get( nKey,   xDef ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ColorN2H ;

static FUNCTION ColorN2H_Name( nKey ) ; local Self AS CLASS ColorN2H := QSelf() AS CLASS ColorN2H
   LOCAL cName := ::cPref

   If HB_ISARRAY( nKey )
      cName += strzero(::oNH:Pos( nKey[1] ), ::nLenN )
      If len(nKey) > 1 .AND. nKey[2] <> Nil
         cName += strzero(::oNH:Pos( nKey[2] ), ::nLenN )
      EndIf
   Else
      cName += strzero(::oNH:Pos( nKey )   , ::nLenN )
   EndIf

RETURN cName

static FUNCTION ColorN2H_Def( nDef, cDef ) ; local Self AS CLASS ColorN2H := QSelf() AS CLASS ColorN2H
   LOCAL aClr

   If nDef <> Nil .AND. HB_ISNUMERIC(nDef)
      ::nDef := nDef
   EndIf

   If cDef <> Nil .AND. HB_ISCHAR(cDef)
      ::cDef := cDef
   EndIf











































































































































   aClr := {                             0                ,  128               ,  139              ,  255                  ,  17919            ,  25600            ,  32768                ,  32896                ,  36095           ,  42495               ,  55295                 ,  64636            ,  65280                 ,  65407           ,  755384        ,  1262987          ,  1993170            ,  2139610            ,  2237106            ,  2263842          ,  2330219            ,  2763429                ,  2970272               ,  3107669       ,  3145645          ,  3329330            ,  3329434          ,  3937500              ,  4163021                 ,  4678655               ,  5197615        ,  5275647                ,  5737262             ,  6053069               ,  6333684           ,  6908265              ,  7059389            ,  7346457         ,  7451452       ,  7504122               ,  8034025           ,  8036607          ,  8388352          ,  8388608                 ,  8388736               ,  8421376                 ,  8421504                 ,  8421616           ,  8519755               ,  8721863      ,  8894686            ,  9109504             ,  9109643          ,  9125192        ,  9145088             ,  9221330                  ,  9234160                ,  9408444            ,  9419919         ,  9470064            ,  9498256           ,  9639167             ,  9662683        ,  10025880            ,  10061943       ,  10156544    ,  10526303            ,  11119017             ,  11186720        ,  11193702     ,  11200750        ,  11394815          ,  11788021                ,  11823615              ,  11829830            ,  11920639             ,  12180223            ,  12632256               ,  12695295            ,  12903679               ,  13353215                 ,  13382297           ,  13422920      ,  13434880           ,  13458026            ,  13495295       ,  13499135         ,  13688896            ,  13749760        ,  13826810 ,  13828244           ,  13850042         ,  13882323            ,  13959039           ,  14020607           ,  14053594               ,  14150650         ,  14204888              ,  14381203         ,  14474460            ,  14480885                ,  14481663             ,  14524637                 ,  14599344       ,  14745599          ,  14772545            ,  14804223            ,  14822282           ,  15128749            ,  15130800           ,  15134970                ,  15136253              ,  15453831              ,  15570276       ,  15624315      ,  15631086               ,  15658671        ,  15660543             ,  15792895          ,  15794160             ,  15794175                ,  16118015        ,  16119285           ,  16436871         ,  16443110             ,  16448255                 ,  16449525            ,  16711680                 ,  16711935              ,  16748574           ,  16760576          ,  16775408            ,  16775416           ,  16776960                 ,  16777184            ,  16777200                ,  16777215                   }

   AEval( aClr, {|nclr| ::oNH:Set( nclr, HMG_ClrToHTML( nclr ) ) } )

   ::nLenN := Len( hb_ntos( ::oNH:Len ) )

RETURN Self

_HB_CLASS Tsb2Xml2Xls ; function Tsb2Xml2Xls ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "Tsb2Xml2Xls", iif( .F., { }, { @HBObject() } ), @Tsb2Xml2Xls() ) ) ;

  _HB_MEMBER { nRow } ; oClass:AddMultiData(, 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nRow"}, .F. )
  _HB_MEMBER { nCol } ; oClass:AddMultiData(, 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCol"}, .F. )
  _HB_MEMBER { cFile } ; oClass:AddMultiData(, "Book.xml", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFile"}, .F. )
  _HB_MEMBER { oBrw } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrw"}, .F. )
  _HB_MEMBER { oXml } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oXml"}, .F. )
  _HB_MEMBER { cSheet } ; oClass:AddMultiData(, "Sheet1", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSheet"}, .F. )
  _HB_MEMBER { oSheet } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSheet"}, .F. )
  _HB_MEMBER { aForma } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aForma"}, .F. )
  _HB_MEMBER { hFormaFont } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hFormaFont"}, .F. )
  _HB_MEMBER { nFormaAlign } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFormaAlign"}, .F. )
  _HB_MEMBER { nFormaFore } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFormaFore"}, .F. )
  _HB_MEMBER { nFormaBack } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFormaBack"}, .F. )
  _HB_MEMBER { aTitle } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTitle"}, .F. )
  _HB_MEMBER { hTitleFont } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hTitleFont"}, .F. )
  _HB_MEMBER { nTitleAlign } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTitleAlign"}, .F. )
  _HB_MEMBER { nTitleFore } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTitleFore"}, .F. )
  _HB_MEMBER { nTitleBack } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTitleBack"}, .F. )
  _HB_MEMBER { aBefore } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBefore"}, .F. )
  _HB_MEMBER { hBeforeFont } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hBeforeFont"}, .F. )
  _HB_MEMBER { nBeforeAlign } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nBeforeAlign"}, .F. )
  _HB_MEMBER { nBeforeFore } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nBeforeFore"}, .F. )
  _HB_MEMBER { nBeforeBack } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nBeforeBack"}, .F. )
  _HB_MEMBER { aAfter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aAfter"}, .F. )
  _HB_MEMBER { hAfterFont } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hAfterFont"}, .F. )
  _HB_MEMBER { nAfterAlign } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nAfterAlign"}, .F. )
  _HB_MEMBER { nAfterFore } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nAfterFore"}, .F. )
  _HB_MEMBER { nAfterBack } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nAfterBack"}, .F. )
  _HB_MEMBER { aLogicalText } ; oClass:AddMultiData(, { "Yes", "No" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aLogicalText"}, .F. )
  _HB_MEMBER { cDateFormat } ; oClass:AddMultiData(, "dd.mm.yyyy", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDateFormat"}, .F. )
  _HB_MEMBER { lActivate } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lActivate"}, .F. )
  _HB_MEMBER { nOldRec } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOldRec"}, .F. )
  _HB_MEMBER { nOldRow } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOldRow"}, .F. )
  _HB_MEMBER { nOldCol } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOldCol"}, .F. )

  _HB_MEMBER { oStyles } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oStyles"}, .F. )
  _HB_MEMBER { oClrN2H } ; oClass:AddMultiData(, oColorN2H(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oClrN2H"}, .F. )
  _HB_MEMBER { oAlign } ; oClass:AddMultiData(, oKeyData(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlign"}, .F. )
  _HB_MEMBER { oBorder } ; oClass:AddMultiData(, oKeyData(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBorder"}, .F. )
  _HB_MEMBER { oFont } ; oClass:AddMultiData(, oKeyData(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFont"}, .F. )
  _HB_MEMBER { oFore } ; oClass:AddMultiData(, oColorN2H("FC"), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFore"}, .F. )
  _HB_MEMBER { oBack } ; oClass:AddMultiData(, oColorN2H("BC"), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBack"}, .F. )
  _HB_MEMBER { oData } ; oClass:AddMultiData(, oKeyData(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oData"}, .F. )
  _HB_MEMBER { oName } ; oClass:AddMultiData(, oKeyData(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oName"}, .F. )
  _HB_MEMBER { oStyl } ; oClass:AddMultiData(, oKeyData(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oStyl"}, .F. )
  _HB_MEMBER { oData } ; oClass:AddMultiData(, oKeyData(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oData"}, .F. )

  _HB_MEMBER { nClrSuperHd } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrSuperHd"}, .F. )
  _HB_MEMBER { nClrHead } ; oClass:AddMultiData(, ( 192 + ( 192 * 256 ) + ( 192 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrHead"}, .F. )
  _HB_MEMBER { nClrFoot } ; oClass:AddMultiData(, ( 192 + ( 192 * 256 ) + ( 192 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrFoot"}, .F. )

  _HB_MEMBER { cShellExec } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cShellExec"}, .F. )



  _HB_MEMBER New( cFile, oBrw, aTitle, aBefore, aAfter, Forma, cSheet); oClass:AddMethod( "New", @Tsb2Xml2Xls_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

  _HB_MEMBER cAlign(); oClass:AddInline( "cAlign", {|Self, nAlign | ( ( Self ) ), ::oAlign:Get( hb_defaultValue(nAlign, 0) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

  _HB_MEMBER StyleOut( cName, hFont, nAlign, cFrm, nFore, nBack, nBord); oClass:AddMethod( "StyleOut", @Tsb2Xml2Xls_StyleOut(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER StyleTable(); oClass:AddMethod( "StyleTable", @Tsb2Xml2Xls_StyleTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER StyleCreate( cName); oClass:AddMethod( "StyleCreate", @Tsb2Xml2Xls_StyleCreate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

  _HB_MEMBER StyleForma(); oClass:AddMethod( "StyleForma", @Tsb2Xml2Xls_StyleForma(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER StyleTitle(); oClass:AddMethod( "StyleTitle", @Tsb2Xml2Xls_StyleTitle(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER StyleBefore(); oClass:AddMethod( "StyleBefore", @Tsb2Xml2Xls_StyleBefore(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER StyleAfter(); oClass:AddMethod( "StyleAfter", @Tsb2Xml2Xls_StyleAfter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER StyleSet( cKey, xVal, cPic, nAlign, nBord, hFont, nFore, nBack); oClass:AddMethod( "StyleSet", @Tsb2Xml2Xls_StyleSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

  _HB_MEMBER WriteForma(); oClass:AddMethod( "WriteForma", @Tsb2Xml2Xls_WriteForma(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER WriteTitle(); oClass:AddMethod( "WriteTitle", @Tsb2Xml2Xls_WriteTitle(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER WriteBefore(); oClass:AddMethod( "WriteBefore", @Tsb2Xml2Xls_WriteBefore(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER WriteSuperHd(); oClass:AddMethod( "WriteSuperHd", @Tsb2Xml2Xls_WriteSuperHd(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER WriteHeader(); oClass:AddMethod( "WriteHeader", @Tsb2Xml2Xls_WriteHeader(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER WriteColumns(); oClass:AddMethod( "WriteColumns", @Tsb2Xml2Xls_WriteColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER WriteFooter(); oClass:AddMethod( "WriteFooter", @Tsb2Xml2Xls_WriteFooter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER WriteAfter(); oClass:AddMethod( "WriteAfter", @Tsb2Xml2Xls_WriteAfter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
  _HB_MEMBER WriteValue( nRow, nCol, xVal, cPic, cNam, nMerge); oClass:AddMethod( "WriteValue", @Tsb2Xml2Xls_WriteValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

  _HB_MEMBER WriteData(); oClass:AddMethod( "WriteData", @Tsb2Xml2Xls_WriteData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS Tsb2Xml2Xls ;

static FUNCTION Tsb2Xml2Xls_New( cFile, oBrw, aTitle, aBefor, aAfter, aForma, cSheet ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL i, oCol, nCell

   cFile := iif( cFile == NIL, ::cFile, cFile ) ; cSheet := iif( cSheet == NIL, ::cSheet, cSheet )

   ::cFile   := cFile
   ::cSheet  := cSheet
   ::oBrw    := oBrw
   ::oXml    := ExcelWriterXML():New( cFile )
   ::oXml:setOverwriteFile( .T. )
   ::oSheet  := ::oXml:addSheet( cSheet )
   ::oStyles := oKeyData()

   ::oAlign:Set(0  , "Left"  )
   ::oAlign:Set(1, "Center")
   ::oAlign:Set(2 , "Right" )

   AEval(array(5), {|xb,nb| ::oBorder:Set(nb-1, "B" + hb_ntos(::oBorder:Len)) })

   ::nOldRec := iif( oBrw:lIsDbf, ( oBrw:cAlias )->( RecNo() ), oBrw:nAt )
   ::nOldRow := oBrw:nLogicPos()
   ::nOldCol := oBrw:nCell

   If ! empty( aForma )
      If ! HB_ISARRAY( aForma ); aForma := { { aForma } }
      EndIf

      i := Len( aForma )

      ::aForma := aForma[1]

      If     i == 2
         ::hFormaFont  := aForma[2]
      ElseIf i == 3
         ::hFormaFont  := aForma[2]
         ::nFormaAlign := aForma[3]
      ElseIf i == 4
         ::hFormaFont  := aForma[2]
         ::nFormaAlign := aForma[3]
         ::nFormaFore  := aForma[4]
      ElseIf i == 5
         ::hFormaFont  := aForma[2]
         ::nFormaAlign := aForma[3]
         ::nFormaFore  := aForma[4]
         ::nFormaBack  := aForma[5]
      EndIf
   EndIf

   If ! empty( aTitle )
      If ! HB_ISARRAY( aTitle ); aTitle := { { aTitle } }
      EndIf

      i := Len( aTitle )

      ::aTitle := aTitle[1]

      If     i == 2
         ::hTitleFont  := aTitle[2]
      ElseIf i == 3
         ::hTitleFont  := aTitle[2]
         ::nTitleAlign := aTitle[3]
      ElseIf i == 4
         ::hTitleFont  := aTitle[2]
         ::nTitleAlign := aTitle[3]
         ::nTitleFore  := aTitle[4]
      ElseIf i == 5
         ::hTitleFont  := aTitle[2]
         ::nTitleAlign := aTitle[3]
         ::nTitleFore  := aTitle[4]
         ::nTitleBack  := aTitle[5]
      EndIf
   EndIf

   If ! empty( aBefor )
      If ! HB_ISARRAY( aBefor ); aBefor := { { aBefor } }
      EndIf

      i := Len( aBefor )
      ::aBefore := aBefor[1]
      If     i == 2
         ::hBeforeFont  := aBefor[2]
      ElseIf i == 3
         ::hBeforeFont  := aBefor[2]
         ::nBeforeAlign := aBefor[3]
      ElseIf i == 4
         ::hBeforeFont  := aBefor[2]
         ::nBeforeAlign := aBefor[3]
         ::nBeforeFore  := aBefor[4]
      ElseIf i == 5
         ::hBeforeFont  := aBefor[2]
         ::nBeforeAlign := aBefor[3]
         ::nBeforeFore  := aBefor[4]
         ::nBeforeBack  := aBefor[5]
      EndIf
   EndIf

   If ! empty( aAfter )
      If ! HB_ISARRAY( aAfter ); aAfter := { { aAfter } }
      EndIf

      i := Len( aAfter )
      ::aAfter := aAfter[1]
      If     i == 2
         ::hAfterFont  := aAfter[2]
      ElseIf i == 3
         ::hAfterFont  := aAfter[2]
         ::nAfterAlign := aAfter[3]
      ElseIf i == 4
         ::hAfterFont  := aAfter[2]
         ::nAfterAlign := aAfter[3]
         ::nAfterFore  := aAfter[4]
      ElseIf i == 5
         ::hAfterFont  := aAfter[2]
         ::nAfterAlign := aAfter[3]
         ::nAfterFore  := aAfter[4]
         ::nAfterBack  := aAfter[5]
      EndIf
   EndIf

   WITH OBJECT ::oBrw
   nCell := 0
   FOR i := 1 TO Len( :aColumns )
       oCol := :aColumns[ i ]
       If i == 1 .AND. :lSelector; LOOP
       ElseIf ! oCol:lVisible    ; LOOP
       ElseIf oCol:lBitMap       ; LOOP
       EndIf
       If ::hTitleFont == Nil
          ::hTitleFont := :hFontHeadGet( oCol, i )
       EndIf
       nCell++
       ::oSheet:columnWidth( nCell,  oCol:nWidth / 1.3 )
   NEXT
   end








   ::hFormaFont := iif( ::hFormaFont == NIL, oBrw:hFont, ::hFormaFont ) ; ::nFormaAlign := iif( ::nFormaAlign == NIL, 1, ::nFormaAlign ) ; ::hTitleFont := iif( ::hTitleFont == NIL, oBrw:hFont, ::hTitleFont ) ; ::nTitleAlign := iif( ::nTitleAlign == NIL, 1, ::nTitleAlign ) ; ::hBeforeFont := iif( ::hBeforeFont == NIL, oBrw:hFont, ::hBeforeFont ) ; ::nBeforeAlign := iif( ::nBeforeAlign == NIL, 0, ::nBeforeAlign ) ; ::hAfterFont := iif( ::hAfterFont == NIL, oBrw:hFont, ::hAfterFont ) ; ::nAfterAlign := iif( ::nAfterAlign == NIL, 0, ::nAfterAlign )

RETURN Self

static FUNCTION Tsb2Xml2Xls_StyleOut( cName, hFont, nAlign, cFrm, nFore, nBack, nBord ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL aFont  := GetFontParam( hFont )
   LOCAL oStyle := ::oXml:addStyle( cName )

   oStyle:alignHorizontal( ::cAlign( nAlign    ) )
   oStyle:alignVertical  ( ::cAlign( 1 ) )
   oStyle:SetfontName( aFont[1] )
   oStyle:SetfontSize( aFont[2] )
      If aFont[3]
   oStyle:setFontBold()
      EndIf
      If aFont[4]
   oStyle:setFontItalic()
      EndIf
      If aFont[5]
   oStyle:setFontUnderline()
      EndIf
      If aFont[6]
   oStyle:setFontStrikethrough()
      EndIf
      If nFore <> Nil
   oStyle:setFontColor( ::oFore:Get( nFore ) )
      EndIf
      If nBack <> Nil
   oStyle:bgColor     ( ::oBack:Get( nBack ) )
      EndIf
      If nBord <> Nil .AND. nBord >= 0 .AND. nBord <= ::oBorder:Len
   oStyle:Border( "All", nBord, "Automatic",  "Continuous" )
      EndIf
      If ! empty( cFrm )
   oStyle:setNumberFormat( cFrm )
      EndIf
   oStyle:alignWraptext()

   ::oStyles:Set(cName, oStyle)

RETURN Nil

static FUNCTION Tsb2Xml2Xls_StyleForma( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL cName, hFont, nAlign, cFrm, nFore, nBack, nBord

   If empty( ::aForma ); RETURN Nil
   EndIf

   cName  := "Forma"
   hFont  := ::hFormaFont
   nAlign := ::nFormaAlign

   ::StyleOut( cName, hFont, nAlign, cFrm, nFore, nBack, nBord )

RETURN Nil

static FUNCTION Tsb2Xml2Xls_StyleTitle( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL cName, hFont, nAlign, cFrm, nFore, nBack, nBord

   If empty( ::aTitle ); RETURN Nil
   EndIf

   cName  := "Title"
   hFont  := ::hTitleFont
   nAlign := ::nTitleAlign

   ::StyleOut( cName, hFont, nAlign, cFrm, nFore, nBack, nBord )

RETURN Nil

static FUNCTION Tsb2Xml2Xls_StyleBefore( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL cName, hFont, nAlign, cFrm, nFore, nBack, nBord

   If empty( ::aBefore ); RETURN Nil
   EndIf

   cName  := "Before"
   hFont  := ::hBeforeFont
   nAlign := ::nBeforeAlign

   ::StyleOut( cName, hFont, nAlign, cFrm, nFore, nBack, nBord )

RETURN Nil

static FUNCTION Tsb2Xml2Xls_StyleAfter( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL cName, hFont, nAlign, cFrm, nFore, nBack, nBord

   If empty( ::aAfter ); RETURN Nil
   EndIf

   cName  := "After"
   hFont  := ::hAfterFont
   nAlign := ::nAfterAlign

   ::StyleOut( cName, hFont, nAlign, cFrm, nFore, nBack, nBord )

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteForma( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL aForma := ::aForma, i
   LOCAL nRow  := ::nRow, nLen
   LOCAL cName := "Forma"

   If HB_ISCHAR( aForma ); aForma := { aForma }
   EndIf

   If ! HB_ISARRAY( aForma ) .OR. empty( ::oStyles:Get(cName) )
      RETURN Nil
   EndIf

   nLen := Len( ::oBrw:aColumns )

   FOR i := 1 TO Len( aForma )
       ::WriteValue(nRow + i - 1, 1, aForma[ i ], , cName, nLen - 1)
       ::nRow++
   NEXT

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteTitle( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL aTitle := ::aTitle, i
   LOCAL nRow  := ::nRow, nLen
   LOCAL cName := "Title"

   If HB_ISCHAR( aTitle ); aTitle := { aTitle }
   EndIf

   If ! HB_ISARRAY( aTitle ) .OR. empty( ::oStyles:Get(cName) )
      RETURN Nil
   EndIf

   nLen := Len( ::oBrw:aColumns )

   FOR i := 1 TO Len( aTitle )
       ::WriteValue(nRow + i - 1, 1, aTitle[ i ], , cName, nLen - 1)
       ::nRow++
   NEXT

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteBefore( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL aBefor := ::aBefore, i
   LOCAL nRow  := ::nRow, nLen
   LOCAL cName := "Before"

   If HB_ISCHAR( aBefor ); aBefor := { aBefor }
   EndIf

   If ! HB_ISARRAY( aBefor ) .OR. empty( ::oStyles:Get(cName) )
      RETURN Nil
   EndIf

   nLen := Len( ::oBrw:aColumns )

   FOR i := 1 TO Len( aBefor )
       ::WriteValue(nRow + i - 1, 1, aBefor[ i ], , cName, nLen - 1)
       ::nRow++
   NEXT

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteAfter( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL aAfter := ::aAfter, i
   LOCAL nRow  := ::nRow, nLen
   LOCAL cName := "After"

   If HB_ISCHAR( aAfter ); aAfter := { aAfter }
   EndIf

   If ! HB_ISARRAY( aAfter ) .OR. empty( ::oStyles:Get(cName) )
      RETURN Nil
   EndIf

   nLen := Len( ::oBrw:aColumns )

   FOR i := 1 TO Len( aAfter )
       ::WriteValue(nRow + i - 1, 1, aAfter[ i ], , cName, nLen - 1)
       ::nRow++
   NEXT

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteSuperHd( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL a, b, c, i, k, n, t, s
   LOCAL nRow  := ::nRow
   LOCAL cPref := "SH"

   WITH OBJECT ::oBrw
   FOR i := 1 TO Len( :aSuperHead )
       s := ::oStyl:Get("S" + "." + hb_ntos(i))
       If empty(s); LOOP
       EndIf
       t := :cTextSupHdGet( i )
       n := :aSuperHead[ i ][1]
       k := :aSuperHead[ i ][2]
       ::WriteValue( nRow, n, t, , s, k - n )
   NEXT
   ::oSheet:cellHeight ( nRow, 1, :nHeightSuper )
   ::nRow++
   end

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteHeader( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL nRow  := ::nRow, a, c, o, i, t, s
   LOCAL cPref := "H", nCell

   WITH OBJECT ::oBrw
   nCell := 0
   FOR i := 1 TO Len( :aColumns )
       o := :aColumns[ i ]
       s := ::oStyl:Get("H" + "." + hb_ntos(i))
       If empty( s ); LOOP
       EndIf
       nCell++
       t := :GetValProp( o:cHeading, "", i )
       ::WriteValue( nRow, nCell, t, , s )
   NEXT
   ::oSheet:cellHeight( nRow, 1, :nHeightHead )
   ::nRow++
   end

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteColumns( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL nRow := ::nRow
   LOCAL cPic, nLine, nLen, xVal, cNam, nCol, oCol, nCell

   WITH OBJECT ::oBrw
   Eval( :bGoTop )
   nLen  := :nLen
   nLine := 1
   while nLine <= nLen
      ::oSheet:cellHeight( nRow, 1, :nHeightCell / 1.3 )
      nCell := 0
      FOR nCol := 1 TO Len( :aColumns )
          oCol := :aColumns[ nCol ]
          cNam := ::oStyl:Get(hb_ntos(nLine) + "." + hb_ntos(nCol))
          If empty( cNam ); LOOP
          EndIf
          nCell++
          xVal := :bDataEval( oCol, , nCol )
          cPic := :cPictureGet( oCol, nCol )
          ::WriteValue( nRow, nCell, xVal, cPic, cNam )
      NEXT
      :Skip(1)
      nLine++
      nRow++
      DoEvents()
   ENDDO
   ::nRow := nRow
   end

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteFooter( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL a, c, o, i, t, s
   LOCAL nRow  := ::nRow
   LOCAL cPref := "F", nCell

   WITH OBJECT ::oBrw
   nCell := 0
   FOR i := 1 TO Len( :aColumns )
       o := :aColumns[ i ]
       s := ::oStyl:Get("F" + "." + hb_ntos(i))
       If empty( s ); LOOP
       EndIf
       nCell++
       t := :GetValProp( o:cFooting, "", i )
       ::WriteValue( nRow, nCell, t, , s )
   NEXT
   ::oSheet:cellHeight( nRow, 1, :nHeightFoot )
   ::nRow++
   end

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteValue( nRow, nCol, xVal, cPic, cNameStyle, nMerge ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL cTyp := ValType( xVal ), cName, aVal

   If   ! empty( ::oStyles:Get(cNameStyle) )
      cName := cNameStyle
   ElseIf empty( aVal := ::oName:Get( cNameStyle ) )
      cName := ::oStyl:Get( cNameStyle )
   Else
      cName := cNameStyle
   EndIf

   If     cTyp == "N"
      If ! empty(xVal) .AND. ! empty(cPic)
         xVal := val( Transform( xVal, cPic ) )
      EndIf
      ::oSheet:writeNumber  ( nRow, nCol, xVal, cName )
   ElseIf cTyp == "C"
      If ! empty(xVal) .AND. ! empty(cPic)
         xVal := Transform( xVal, cPic )
      EndIf
      xVal := StrTran( xVal, CHR(13)+CHR(10), "&#10;" )
      ::oSheet:writeString  ( nRow, nCol, xVal, cName )
   ElseIf cTyp == "D"
      xVal := hb_DtoC(xVal, ::cDateFormat)
      ::oSheet:writeDateTime( nRow, nCol, xVal, cName )
   ElseIf cTyp == "L"
      xVal := ::aLogicalText [ iif( xVal, 1, 2 ) ]
      ::oSheet:writeString  ( nRow, nCol, xVal, cName )
   ElseIf cTyp == "U"
      xVal := ""
      ::oSheet:writeString  ( nRow, nCol, xVal, cName )
   ElseIf cTyp == "T"
      xVal := HB_TToC( xVal )
      ::oSheet:writeString  ( nRow, nCol, xVal, cName )
   EndIf

   If HB_ISNUMERIC( nMerge )
      ::oSheet:cellMerge( nRow, nCol, nMerge, 0 )
   EndIf

RETURN Nil

static FUNCTION Tsb2Xml2Xls_WriteData( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL cFile := ::cFile, cPth, cFil, cExt, n := 0
   LOCAL cExec := ::cShellExec

   If empty(cExec); cExec := "Excel"
   EndIf

   hb_FNameSplit(cFile, @cPth, @cFil, @cExt)

   If hb_FileExists(hb_FNameMerge(cPth, cFil, cExt))
      while hb_FileExists(hb_FNameMerge(cPth, cFil+" ("+hb_ntos( ++n )+")", cExt))
      ENDDO
      cFile := hb_FNameMerge(cPth, cFil+" ("+hb_ntos( n )+")", cExt)
   EndIf

   WITH OBJECT ::oBrw
   ::cFile := cFile
   :GotoRec(::nOldRec)
   :GoPos( ::nOldRow, ::nOldCol )
   ::oXml:writeData( cFile )
   If ::lActivate
      hb_memowrit("_e_.cmd", "@Start "+cExec+' ".\'+cFile+'"'+CHR(13)+CHR(10))
      __Run( '"_e_.cmd"' )
      InkeyGui(1000)
      fErase("_e_.cmd")

   EndIf
   :Display()
   end

RETURN Nil

static FUNCTION Tsb2Xml2Xls_StyleTable( ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL nLine, cLine, nSkip, nAlign, i, xVal
   LOCAL nCol, oCol, nCnt, cCol, cTyp, cDec, cPic, cFrm
   LOCAL oXml  := ::oXml, cAlg, hFont
   LOCAL oFont := ::oFont, cFont, cBor, nBor
   LOCAL oFore := ::oFore, cFore, nFore
   LOCAl oBack := ::oBack, cBack, nBack
   LOCAL oName := ::oName, cName

   WITH OBJECT ::oBrw

   FOR nCol := 1 TO Len( :aSuperHead )
       hFont := :hFontSupHdGet( nCol )
       oFont:Set(hFont, hFont)
   NEXT

   FOR nCol := 1  To Len( :aColumns )
       oCol := :aColumns[ nCol ]
       If nCol == 1 .AND. :lSelector; LOOP
       ElseIf ! oCol:lVisible       ; LOOP
       ElseIf oCol:lBitMap          ; LOOP
       EndIf
       hFont := :hFontHeadGet( oCol, nCol )
       oFont:Set(hFont, hFont)
       hFont := :hFontFootGet( oCol, nCol )
       oFont:Set(hFont, hFont)
   NEXT

   Eval( :bGoTop )
   nCnt  := :nLen
   nLine := 1
   while nLine <= nCnt
       cLine := hb_ntos(nLine)
       FOR nCol := 1  To Len( :aColumns )
           oCol := :aColumns[ nCol ]
           If nCol == 1 .AND. :lSelector; LOOP
           ElseIf ! oCol:lVisible       ; LOOP
           ElseIf oCol:lBitMap          ; LOOP
           EndIf
           hFont := :hFontGet( oCol, nCol )
           oFont:Set(hFont, hFont)
       NEXT
       nSkip := :Skip(1)
       nLine++
       DoEvents()
       IF nSkip == 0
          EXIT
       ENDIF
   ENDDO

   cTyp := "C"
   cDec := "0"
   cFrm := ""
   nBor := 2
   cBor := "B" + hb_ntos(nBor)

   FOR nCol := 1 TO Len( :aSuperHead )
       cCol   := hb_ntos(nCol)
       hFont  := :hFontSupHdGet( nCol )
       cFont  := "FN" + hb_ntos(oFont:Pos(hFont))
       nFore  := :nForeSupHdGet( nCol )
       cFore  := oFore:Name(nFore)
       nBack  := :nBackSupHdGet( nCol, 2 )
       cBack  := oBack:Name(nBack)
       nAlign := :nAlignSupHdGet( nCol )
       cAlg   := "A" + hb_ntos(nAlign)
       cName  := cFont + cFore + cBack + cAlg + cBor + cTyp + cDec
       ::oStyl:Set("S" + "." + cCol, cName)
       oName:Set(cName, { hFont, nFore, nBack, nAlign, nBor, cTyp, cFrm })
   NEXT

   FOR nCol := 1  To Len( :aColumns )
       oCol := :aColumns[ nCol ]
       If nCol == 1 .AND. :lSelector; LOOP
       ElseIf ! oCol:lVisible       ; LOOP
       ElseIf oCol:lBitMap          ; LOOP
       EndIf
       cCol  := hb_ntos(nCol)

       hFont  := :hFontHeadGet( oCol, nCol )
       cFont  := "FN" + hb_ntos(oFont:Pos(hFont))
       nFore  := :nColorGet( oCol:nClrHeadFore, nCol )
       cFore  := oFore:Name(nFore)
       nBack  := :nColorGet( oCol:nClrHeadBack, nCol, Nil, .F. )
       cBack  := oBack:Name(nBack)
       nAlign := :nAlignGet( oCol:nHAlign, nCol, 1 )
       cAlg   := "A" + hb_ntos(nAlign)
       cName  := cFont + cFore + cBack + cAlg + cBor + cTyp + cDec
       ::oStyl:Set("H" + "." + cCol, cName)
       oName:Set(cName, { hFont, nFore, nBack, nAlign, nBor, cTyp, cFrm })

       hFont  := :hFontFootGet( oCol, nCol )
       nFore  := :nColorGet( oCol:nClrFootFore, nCol )
       cFore  := oFore:Name(nFore)
       nBack  := :nColorGet( oCol:nClrFootBack, nCol, Nil, .F. )
       cBack  := oBack:Name(nBack)
       nAlign := :nAlignGet( oCol:nFAlign, nCol, 1 )
       cAlg   := "A" + hb_ntos(nAlign)
       cName  := cFont + cFore + cBack + cAlg + cBor + cTyp + cDec
       ::oStyl:Set("F" + "." + hb_ntos(nCol), cName)
       oName:Set(cName, { hFont, nFore, nBack, nAlign, nBor, cTyp, cFrm })
   NEXT

   Eval( :bGoTop )
   nCnt  := :nLen
   nLine := 1
   while nLine <= nCnt
       cLine := hb_ntos(nLine)
       FOR nCol := 1  To Len( :aColumns )
           oCol := :aColumns[ nCol ]
           If nCol == 1 .AND. :lSelector; LOOP
           ElseIf ! oCol:lVisible       ; LOOP
           ElseIf oCol:lBitMap          ; LOOP
           EndIf
           cCol  := hb_ntos(nCol)
           hFont := :hFontGet( oCol, nCol )
           cFont := "FN" + hb_ntos(oFont:Pos(hFont))
           nFore := :nColorGet( oCol:nClrFore, nCol, :nAt )
           cFore := oFore:Name(nFore)
           nBack := :nColorGet( oCol:nClrBack, nCol, :nAt, .F.)
           cBack := oBack:Name(nBack)
           nAlign := :nAlignGet( oCol:nAlign , nCol, 0 )
           xVal := :bDataEval( oCol, , nCol )
           cTyp := ValType( xVal )
           cDec := "0"
           cFrm := ""
           nBor := 1
           cBor := "B" + hb_ntos(nBor)
           cAlg := "A" + hb_ntos(nAlign)
           If cTyp == "N"
              cPic := :cPictureGet( oCol, nCol )
              If empty(cPic); cPic := hb_ntos(xVal)
              EndIf
              cFrm := "#,##0"
              If ( i := RAt(".", cPic) ) > 0
                 i := Len(cPic) - i
                 cFrm += "." + Replicate("0", i)
                 cDec := hb_ntos( i )
              EndIf
           ElseIf cTyp == "D"
              cFrm := ::cDateFormat
           EndIf
           cName := cFont + cFore + cBack + cAlg + cBor + cTyp + cDec
           ::oStyl:Set(cLine + "." + cCol, cName)
           oName:Set(cName, { hFont, nFore, nBack, nAlign, nBor, cTyp, cFrm })
       NEXT
       nSkip := :Skip(1)
       nLine++
       DoEvents()
       IF nSkip == 0
          EXIT
       ENDIF
   ENDDO

   :GotoRec(::nOldRec)
   :GoPos( ::nOldRow, ::nOldCol )
   :Display()

   end

   ::StyleCreate()

RETURN Nil

static FUNCTION Tsb2Xml2Xls_StyleCreate( cKey ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL oStyle, aName, cName, aNam
   LOCAL aFont, hFont, nFore, nBack, nAlign, nBord, cTyp, cFrm, a

   If empty( cKey )
      aNam  := ::oName:GetAll( .F. )
   Else
      cName := ::oStyl:Get( cKey  )
      aName := ::oName:Get( cName )
      aNam  := { { cName, aName } }
   EndIf

   FOR EACH a IN aNam

       cName  := a[1]
       aName  := a[2]

       hFont  := aName[1]
       nFore  := aName[2]
       nBack  := aName[3]
       nAlign := aName[4]
       nBord  := aName[5]
       cTyp   := aName[6]
       cFrm   := aName[7]
       aFont  := GetFontParam( hFont )

       oStyle := ::oXml:addStyle( cName )

       oStyle:alignHorizontal( ::cAlign( nAlign    ) )
       oStyle:alignVertical  ( ::cAlign( 1 ) )
       oStyle:SetfontName( aFont[1] )
       oStyle:SetfontSize( aFont[2] )
          If aFont[3]
       oStyle:setFontBold()
          EndIf
          If aFont[4]
       oStyle:setFontItalic()
          EndIf
          If aFont[5]
       oStyle:setFontUnderline()
          EndIf
          If aFont[6]
       oStyle:setFontStrikethrough()
          EndIf
       oStyle:setFontColor( ::oFore:Get( nFore ) )
       oStyle:bgColor     ( ::oBack:Get( nBack ) )
          If nBord >= 0 .AND. nBord <= ::oBorder:Len
       oStyle:Border( "All", nBord, "Automatic",  "Continuous" )
          EndIf
          If ! empty( cFrm )
       oStyle:setNumberFormat( cFrm )
          EndIf
       oStyle:alignWraptext()

   NEXT

RETURN oStyle

static FUNCTION Tsb2Xml2Xls_StyleSet( cKey, xVal, cPic, nAlign, nBord, hFont, nFore, nBack ) ; local Self AS CLASS Tsb2Xml2Xls := QSelf() AS CLASS Tsb2Xml2Xls
   LOCAL cName, nFont, cFont, cFore, cBack, cBord, cAlign, i
   LOCAL cTyp, cFrm, cDec




   hFont := iif( hFont == NIL, ::oBrw:hFont, hFont ) ; nFore := iif( nFore == NIL, ::oBrw:nClrText, nFore ) ; nBack := iif( nBack == NIL, ::oBrw:nClrPane, nBack ) ; nAlign := iif( nAlign == NIL, 0, nAlign ) ; nBord := iif( nBord == NIL, -1, nBord )

   If empty(::oFont:Pos( hFont ))
      ::oFont:Set( hFont, hFont )
   EndIf

   nFont  := ::oFont:Pos( hFont )
   cFont  := "FN" + hb_ntos( nFont )
   cFore  := ::oFore:Name( nFore )
   cBack  := ::oBack:Name( nBack )
   cAlign := "A" + hb_ntos( nAlign )
   cBord  := "B" + hb_ntos( nBord )
   cTyp   := ValType( xVal )
   cFrm   := ""
   cDec   := "0"

   If cTyp == "N"
      If empty(cPic); cPic := hb_ntos(xVal)
      EndIf
      cFrm := "#,##0"
      If ( i := RAt(".", cPic) ) > 0
         i := Len(cPic) - i
         cFrm += "." + Replicate("0", i)
         cDec := hb_ntos( i )
      EndIf
   ElseIf cTyp == "D"
      cFrm := ::cDateFormat
   EndIf

   cName := cFont + cFore + cBack + cAlign + cBord + cTyp + cDec

   ::oStyl:Set( cKey , cName )
   ::oName:Set( cName, { hFont, nFore, nBack, nAlign, nBord, cTyp, cFrm } )

RETURN cName
